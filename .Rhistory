df_long <-
pivot_longer(df,
cols = 2:7,
names_to = "method",
values_to = "fd"
)
df_long$Date <- as.Date(df_long$Date)
df_long$station <- substr(sts[i], start = 1, stop = 6)
df_long$fd[is.na(df_long$fd)] <- 0
df_long$fd <- as.integer(as.character(df_long$fd))
df_long$order <- rep(c(1,6,5,4,2,3), nrow(df_long) /6)
plot_events <- rbind(plot_events, df_long)
}
my_breaks <- as.Date(seq(as.Date('2004-01-01'),
as.Date('2014-12-31'),
by = "6 months"))
stations_crop <- unique(plot_events$station)
i = 1
station_selec <- stations_crop[i]
plot_events_selec <- plot_events[plot_events$station == station_selec,]
plot_events_selec
# p_station <-
ggplot(transform(plot_events_selec, method = factor(method,
levels = c('Ford and Labosier',
'Osman et al.',
'Multi-criteria',
'Christian et al.',
"Noguera et al.",
"Pendergrass et al."))),
aes(x = Date)) +
facet_wrap(facets = vars(method),nrow = 6,strip.position = "left")+
geom_bar(aes(y = fd, fill = as.factor(fd)), stat = 'identity') +
scale_x_date(breaks = my_breaks, expand = c(0, 0), limits = c(as.Date('2004-01-01'),
as.Date('2014-12-31'))) +
scale_y_continuous(expand = c(0, 0), breaks = c(0,0.5,1)) +
geom_line(aes(y = 0 + swc/50), alpha = 0.5, size = 0.2,show.legend = F)+
geom_line(aes(y = 0 + swc_p20/50), alpha = 0.5, size = 0.2,show.legend = F, color = 'red')+
geom_line(aes(y = 0 + swc_p40/50), alpha = 0.5, size = 0.2,show.legend = F, color = 'grey')+
# geom_line(aes(y = (3+precipitation_anomaly)/6), alpha = 0.5, size = 0.4,show.legend = F, color = 'blue')+
# geom_line(aes(y = (3+temperature_anomaly)/6), alpha = 0.5, size = 0.4,show.legend = F, color = 'orange')+
# geom_line(aes(y = (3+et0_anomaly)/6), alpha = 0.5, size = 0.4,show.legend = F, color = 'green')+
scale_fill_manual(
values = c("#F0F0F0","#DE0000"),
name = "Flash Drought"
) +
ggtitle(paste("Flash Drought identification by methods in",stations_crop[i], '+ ET0_anom')) +
xlab("Date") +
ylab("Method") +
theme(
panel.background = element_rect(fill = 'white',
colour = 'grey',
size = 0.2,
linetype = 'solid'),
panel.grid.major = element_line(size = 0.2, linetype = 'solid',
colour = "grey"),
axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
legend.position = "bottom",
)
# p_station <-
ggplot(transform(plot_events_selec, method = factor(method,
levels = c('Ford and Labosier',
'Osman et al.',
'Multi-criteria',
'Christian et al.',
"Noguera et al.",
"Pendergrass et al."))),
aes(x = Date)) +
facet_wrap(facets = vars(method),nrow = 6,strip.position = "left")+
geom_bar(aes(y = fd, fill = as.factor(fd)), stat = 'identity') +
scale_x_date(breaks = my_breaks, expand = c(0, 0), limits = c(as.Date('2004-01-01'),
as.Date('2014-12-31'))) +
scale_y_continuous(expand = c(0, 0), breaks = c(0,0.5,1)) +
geom_line(aes(y = 0 + swc/50), alpha = 0.5, size = 0.2,show.legend = F)+
geom_line(aes(y = 0 + swc_p20/50), alpha = 0.5, size = 0.2,show.legend = F, color = 'pink')+
geom_line(aes(y = 0 + swc_p40/50), alpha = 0.5, size = 0.2,show.legend = F, color = 'grey')+
# geom_line(aes(y = (3+precipitation_anomaly)/6), alpha = 0.5, size = 0.4,show.legend = F, color = 'blue')+
# geom_line(aes(y = (3+temperature_anomaly)/6), alpha = 0.5, size = 0.4,show.legend = F, color = 'orange')+
# geom_line(aes(y = (3+et0_anomaly)/6), alpha = 0.5, size = 0.4,show.legend = F, color = 'green')+
scale_fill_manual(
values = c("#F0F0F0","#DE0000"),
name = "Flash Drought"
) +
ggtitle(paste("Flash Drought identification by methods in",stations_crop[i], '+ ET0_anom')) +
xlab("Date") +
ylab("Method") +
theme(
panel.background = element_rect(fill = 'white',
colour = 'grey',
size = 0.2,
linetype = 'solid'),
panel.grid.major = element_line(size = 0.2, linetype = 'solid',
colour = "grey"),
axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
legend.position = "bottom",
)
for (i in 1:length(stations_crop)){
# i = 1
station_selec <- stations_crop[i]
plot_events_selec <- plot_events[plot_events$station == station_selec,]
# p_station <-
ggplot(transform(plot_events_selec, method = factor(method,
levels = c('Ford and Labosier',
'Osman et al.',
'Multi-criteria',
'Christian et al.',
"Noguera et al.",
"Pendergrass et al."))),
aes(x = Date)) +
facet_wrap(facets = vars(method),nrow = 6,strip.position = "left")+
geom_bar(aes(y = fd, fill = as.factor(fd)), stat = 'identity') +
scale_x_date(breaks = my_breaks, expand = c(0, 0), limits = c(as.Date('2004-01-01'),
as.Date('2014-12-31'))) +
scale_y_continuous(expand = c(0, 0), breaks = c(0,0.5,1)) +
geom_line(aes(y = 0 + swc/50), alpha = 0.5, size = 0.2,show.legend = F)+
geom_line(aes(y = 0 + swc_p20/50), alpha = 0.5, size = 0.2,show.legend = F, color = 'pink')+
geom_line(aes(y = 0 + swc_p40/50), alpha = 0.5, size = 0.2,show.legend = F, color = 'grey')+
# geom_line(aes(y = (3+precipitation_anomaly)/6), alpha = 0.5, size = 0.4,show.legend = F, color = 'blue')+
# geom_line(aes(y = (3+temperature_anomaly)/6), alpha = 0.5, size = 0.4,show.legend = F, color = 'orange')+
# geom_line(aes(y = (3+et0_anomaly)/6), alpha = 0.5, size = 0.4,show.legend = F, color = 'green')+
scale_fill_manual(
values = c("#F0F0F0","#DE0000"),
name = "Flash Drought"
) +
ggtitle(paste("Flash Drought identification by methods in",stations_crop[i], '+ SWC')) +
xlab("Date") +
ylab("Method") +
theme(
panel.background = element_rect(fill = 'white',
colour = 'grey',
size = 0.2,
linetype = 'solid'),
panel.grid.major = element_line(size = 0.2, linetype = 'solid',
colour = "grey"),
axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
legend.position = "bottom",
)
# p_station
ggsave(paste(stations_crop[i], '_comparison4.png', sep = ''), units = 'cm', width = 30, height = 20)
}
GETWD()
getwd()
shiny::runApp()
shiny::runApp()
View(all_data)
stations
i = 6
# aux <- read.csv(file = paste(stations[i], '.csv', sep = ''), header = T)[,c(2,4,5,6,7,8,11)]
# colnames(aux) <- c('Date', models)
aux <- read_fst(path = paste(stations[i], '.bin', sep = ''))[,c(1,3,4,5,6,7,10,15)]
aux
stations
read_fst(path = paste(stations[i], '.bin', sep = ''))
a <- read_fst(path = paste(stations[i], '.bin', sep = ''))
View(a)
View(a[,c(1, ncol(a))])
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
selec1 <- stats[stats$Station == 'BE-Lon',]
selec1 <- selec1[lubridate::month(selec1$Date) %in% 3:10, ]
# selec1 <- stats[stats$Station == 'BE-Lon',]
# selec1 <- selec1[lubridate::month(selec1$Date) %in% 3:10, ]
order <- sort(rep(1:5, 6))
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
select(-`Osman et al.`) %>%
# subset(.$model %notin% c(
#   "Mod. Ford and Labosier",
#   "Mo and Lettenmeier",
#   "Alencar et al."
# )) %>%
cbind(order)
selec1
selec1
selec1 <- stats[stats$Station == 'BE-Lon',]
selec1 <- selec1[lubridate::month(selec1$Date) %in% 3:10, ]
selec1
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
select(-c(`Osman et al.`)) %>%
# subset(.$model %notin% c(
#   "Mod. Ford and Labosier",
#   "Mo and Lettenmeier",
#   "Alencar et al."
# )) %>%
cbind(order)
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
select(-c('Osman et al.')) %>%
# subset(.$model %notin% c(
#   "Mod. Ford and Labosier",
#   "Mo and Lettenmeier",
#   "Alencar et al."
# )) %>%
cbind(order)
selec1
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
select(-'Osman et al.') %>%
# subset(.$model %notin% c(
#   "Mod. Ford and Labosier",
#   "Mo and Lettenmeier",
#   "Alencar et al."
# )) %>%
cbind(order)
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`)# %>%
conf_mat1
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
subset(.$model %notin% c("Osman et al.")) %>%
cbind(order)
selec1 <- stats[stats$Station == 'BE-Lon',]
selec1 <- selec1[lubridate::month(selec1$Date) %in% 3:10, ]
# selec1 <- stats[stats$Station == 'BE-Lon',]
# selec1 <- selec1[lubridate::month(selec1$Date) %in% 3:10, ]
order <- sort(rep(1:5, 6))
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
subset(.$model %notin% c("Osman et al.")) %>%
cbind(order)
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
subset(.$model %notin% c("Osman et al."))
conf_mat1
# selec1 <- stats[stats$Station == 'BE-Lon',]
# selec1 <- selec1[lubridate::month(selec1$Date) %in% 3:10, ]
order <- sort(rep(1:6, 5))
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
subset(.$model %notin% c("Osman et al.")) %>%
cbind(order)
order
# selec1 <- stats[stats$Station == 'BE-Lon',]
# selec1 <- selec1[lubridate::month(selec1$Date) %in% 3:10, ]
order <- sort(rep(1:6, 5))
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
subset(.$model %notin% c("Osman et al.")) %>%
cbind(order)
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
subset(.$model %notin% c("Osman et al."))
conf_mat1
selec1[,3:8]
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`)
conf_mat1
##### Auxiliar function
conf_matrix <- function(df, ref) {
metric1 <- NULL
for (i in 1:6) {
# i = 3
conf_mat <-
caret::confusionMatrix(data = factor(df[[i]]), reference = factor(ref))
overall <- data.frame(value = conf_mat$overall)
byclass <- data.frame(value = conf_mat$byClass)
conf_mat <- rbind(overall, byclass)
metric1 <- rbind(metric1, t(conf_mat))
}
metric1 <- data.frame(t(metric1))
colnames(metric1) <- models
metric1$metric <- c(row.names(metric1))
metric1 <- metric1[c(1, 2, 8, 9, 12, 14), ] %>%
gather(key = "model", value = "value", 1:6) #%>%
# .[.$model != "Ford and Labosier", ]
return(metric1)
}
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`)
conf_mat1
conf_mat1 <-
conf_matrix(selec1[,3:8], selec1$`Osman et al.`) %>%
subset(.$model %notin% c("Osman et al.")) %>%
cbind(order)
runApp()
shiny::runApp()
complete_series_select
library(shiny)
library(shinythemes)
library(plotly)
library(leaflet)
library(bslib)
library(caret)
library(ggplot2)
library(dplyr)
library(tidyr)
library(e1071)
library(tidyquant)
library(tidyverse)
library(gapminder)
library(RColorBrewer)
library(tibble)
library(tibbletime)
library(fst)
`%notin%` <- Negate(`%in%`)
# devtools::install_github('pedroalencar1/fdClassify')
# library(fdClassify)
# Global variables - data selection
models <-
c(
"Ford and Labosier",
"Pendergrass et al.",
"Noguera et al.",
"Christian et al.",
"Osman et al.",
"Multi-criteria"
)
stations <- list.files()
# this will select only the fluxnet stations
# this is a temporary modification
stations <- stations[substr(stations, start = 7, stop = 22) == "_FLUXNET2015.bin"]
stations <- substr(stations, 1, nchar(stations) - 4)
station_names <- substr(stations, start = 1, stop = 6)
data_stations <- read.delim("stations.txt") #general data from stations
#general plot paramenters
user_palette <- RColorBrewer::brewer.pal(n = 9, name = "PuBuGn")
user_palette2 <- RColorBrewer::brewer.pal(n = 11, name = "PuOr")
user_palette3 <-
grDevices::colorRampPalette(brewer.pal(9, "OrRd"))(12)[4:12]
# Events co-occurence
# all_data <- read.csv('all_data_fluxnet.csv')
#create list with all events toguether
all_data_swc <- NULL
for (i in 1:length(stations)){
# i = 6
# aux <- read.csv(file = paste(stations[i], '.csv', sep = ''), header = T)[,c(2,4,5,6,7,8,11)]
# colnames(aux) <- c('Date', models)
aux <- read_fst(path = paste(stations[i], '.bin', sep = ''))[,c(1,3,4,5,6,7,10,15)]
aux$Station <- substr(stations[i], start = 1, stop = 6)
all_data_swc <- rbind(all_data_swc, aux)
}
all_data <- all_data_swc[,c(1:7,9)]
# colnames(all_data) <- c('Date', models, 'Station')
all_data$total <- rowSums(all_data[,2:7], na.rm = T)
all_data$Date <- as.Date(all_data$Date)
melt_events <- data.frame(Date = as.Date(sort(rep(seq(as.Date(min(all_data$Date)),
as.Date(max(all_data$Date)),
'day'),
length(stations)))))
melt_events$name <- rep(station_names, length(unique(melt_events$Date)))
melt_events <-left_join(melt_events, all_data[,c(1,8,9)],
by = c("Date" = "Date", "name" = "Station"))
melt_events$year <- lubridate::year(melt_events$Date)
melt_events$name <- as.factor(melt_events$name)
melt_events$Date <- as.Date(melt_events$Date)
melt_events$latitude <-
VLOOKUP(melt_events$name, data_stations, Station, Latitude)
#### standard break dates for plots
my_breaks <- as.Date(seq(as.Date(min(melt_events$Date)),
as.Date(max(melt_events$Date)),
by = "6 months"))
# long table - panel 2
all_data$total <- NULL
all_events_long <- pivot_longer(all_data, names_to = 'method', values_to = 'fd', cols = 2:7)
all_events_long$Date <- as.Date(all_events_long$Date)
all_events_long$latitude <- VLOOKUP(all_events_long$Station, data_stations, 'Station', 'Latitude')
## summary
all_events <- data.frame()
for (i in 1:length(station_names)){
# i = 2
data_selec <- all_data[all_data$Station == station_names[i],]
for (j in 1:length(models)){
# j = 5
durations <- rle(data_selec[,j+1])
df_dur <- data.frame(fd = durations$values, lengths = durations$lengths,
positions = runner::runner(durations$lengths,
k = length(durations$lengths),
f = sum))
df_dur$begin <- NA
if (nrow(df_dur) == 1) next
for (k in 2:nrow(df_dur)){
df_dur$begin[k] <- df_dur$positions[k-1]+1
}
df_dur <- df_dur[df_dur$fd == 1,]
df_dur$date <- data_selec$Date[df_dur$begin]
df_dur$station <- station_names[i]
df_dur$land_use <- data_stations$IGPB2[i]
df_dur$method <- models[j]
all_events <- rbind(all_events, df_dur)
}
}
all_events <- all_events[complete.cases(all_events),]
all_events <- all_events[, c(5,6,7,8,2)]
# all_events <- read.csv("all_events_fluxnet.csv")
all_events$month <- lubridate::month(all_events$date)
events_month <- data.frame(
month = sort(rep(1:12, 22)),
station = rep(unique(substr(
stations,
start = 1, stop = 6)), 12))
events_month <- as_tibble(all_events[, c(6, 2, 4)]) %>%
group_by(month, station, method) %>%
dplyr::summarise(value = n())
# aux1$value[aux1$value > 0] <- 1
events_month <-
pivot_wider(events_month, values_from = 'value', names_from = 'method')
events_month[is.na(events_month)] <- 0
events_month <- events_month[, c(1, 2, 7, 4, 5, 3, 6, 8)]
events_month$`Multi-criteria`[events_month$month %in% c(1, 2, 11, 12)] <- 0
events_month <-
merge(events_month, data_stations, by.x = "station", by.y = "Station")
# events per year
all_events_summary <- all_events %>%
group_by(station, method) %>%
dplyr::summarise(total_evetns = n())
all_events_summary$duration <-  VLOOKUP(
all_events_summary$station,
data_stations,
"Station",
"Duration"
)
all_events_summary$event_year <-
all_events_summary$total_evetns / all_events_summary$duration
# all_events_summary <-
#   all_events_summary[all_events_summary$method %notin%
#                        c("Mod. Ford and Labosier", "Mo and Lettenmeier"), ]
all_events_summary$latitude <-
VLOOKUP(all_events_summary$station, data_stations, Station, Latitude)
# relative_counting <- read.csv("relative_counting.csv")
# colnames(relative_counting) <- c(
#   "method",
#   "month",
#   "Grasslands",
#   "Croplands",
#   "Mixed forests",
#   "Deciduous broadleaf forests",
#   "Evergreen needleleaf forests",
#   "Evergreen broadleaf forests",
#   "Closed shrublands"
# )
#summary total events by year and station
# totals <- read.csv("totals.csv")
totals <- all_events_summary[,1:4] %>%
pivot_wider(names_from = 'method', values_from = 'total_evetns')
totals$landuse <- VLOOKUP(totals$station, data_stations, 'Station', 'IGPB2')
totals <- totals[, c(1,4,8,6,3,7,5,2,9)]
colnames(totals) <- c("Station", models, "Duration", "landuse")
##### proportion months with FD
years_lu <- data_stations %>%
group_by(IGPB2) %>%
summarise(year = sum(Duration))
relative_counting <- totals[,c(2:7,9)] %>%
group_by(landuse) %>%
summarise_all(sum)
relative_counting[,2:7] <- relative_counting[,2:7]/years_lu$year/12
relative_counting <- as.data.frame(t(relative_counting))
colnames(relative_counting) <- relative_counting[1,]
relative_counting <- relative_counting[-1,]
relative_counting$method <- rownames(relative_counting)
##### Auxiliar function
conf_matrix <- function(df, ref) {
metric1 <- NULL
for (i in 1:6) {
# i = 3
conf_mat <-
caret::confusionMatrix(data = factor(df[[i]]), reference = factor(ref))
overall <- data.frame(value = conf_mat$overall)
byclass <- data.frame(value = conf_mat$byClass)
conf_mat <- rbind(overall, byclass)
metric1 <- rbind(metric1, t(conf_mat))
}
metric1 <- data.frame(t(metric1))
colnames(metric1) <- models
metric1$metric <- c(row.names(metric1))
metric1 <- metric1[c(1, 2, 8, 9, 12, 14), ] %>%
gather(key = "model", value = "value", 1:6) #%>%
# .[.$model != "Ford and Labosier", ]
return(metric1)
}
stats <- as_tbl_time(all_data[,c(8,1:7)], index = Date) %>%
# as_tbl_time(Date) %>%
group_by(Station) %>%
collapse_by('monthly') %>%
group_by(Station, Date) %>%
summarise_all(.funs = max)
stats$`Land Use` <- VLOOKUP(stats$Station, data_stations, 'Station', 'IGPB2')
stats$year <- lubridate::year(stats$Date)
stats$month <- lubridate::month(stats$Date)
# stats <- stats[stats$month %in% 3:10,]
stats$`Ford and Labosier`[stats$month %in% c(1,2,11,12)] <- 0
stats$`Multi-criteria`[stats$month %in% c(1,2,11,12)] <- 0
stats[is.na(stats)] <- 0 #Na as no event
# stats <- read.csv("stats_confmat.csv")
colnames(stats) <-
c(
"Station",
"Date",
"Ford and Labosier",
"Pendergrass et al.",
"Noguera et al.",
"Christian et al.",
"Osman et al.",
"Multi-criteria",
"Land Use",
"year",
"month"
)
file1 = stations[1]
complete_series <- read_fst(path = paste(file1, '.bin', sep = ''))
complete_series
runApp()
runApp()
shiny::runApp()
shiny::runApp()
stats
shiny::runApp()
